import { u8_to_hex, hex_to_u8 } from './subtle/utils.jsy'


export const _okey_ = @{}
  get length() :: return 2
  hk21() :: return [this[0], this[1]]
  toJSON() :: return this.hk21()

  get k2loc() :: return as_u8key(this[0])
  get hk2loc() :: return this[0]
  set hk2loc(hk) :: return this[0] = as_hexkey(hk)

  get k1ref() :: return as_u8key(this[1])
  get hk1ref() :: return this[1]
  set hk1ref(hk) :: return this[1] = as_hexkey(hk)

  ciphered: false

export const _okey_ciphered_ = @{}
  __proto__: _okey_
  ciphered: true

  // async encipher(buf) ::
  // async decipher(buf_record) ::


const _rx_hexkey = /^[0-9a-fA-F]{4,256}$/
export function as_hexkey(dk) ::
  if ! dk :: return null
  if dk.trim ::
    if _rx_hexkey.test(dk) ::
      return dk
    throw new Error('Invalid hexkey')

  return _toHex(new Uint8Array(dk))

const _toHex = Uint8Array.fromHex ? dk => dk.toHex() : u8_to_hex
const _fromHex = Uint8Array.fromHex?.bind(Uint8Array) ?? hex_to_u8

export const as_u8key = hk => @
  hk?.trim ? _fromHex(hk) : (console.log({hk}), hk) ?? null

