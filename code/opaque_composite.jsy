import {opaque_core_api} from './core_api.jsy'
import {_okey_, _okey_ciphered_, as_hexkey} from './key.jsy'


const _opaque_composed_ = @{}
  ... opaque_core_api
  //opaque_a: opaque
  //opaque_b: opaque
  //key_proto: _okey_ or _okey_composed_ or _okey_composed_mid_

  async _init_key(is_new) ::
    return @{}
      __proto__: this.key_proto
      kx_a: await this.opaque_a._init_key(is_new)
      kx_b: await this.opaque_b._init_key(is_new)

  async _finish_key(kctx) ::
    kctx.kx_a = await this.opaque_a._finish_key(kctx.kx_a)
    kctx.kx_b = await this.opaque_b._finish_key(kctx.kx_b)
    return kctx

  _kdf0_hash(buf) ::
    return this.opaque_a._kdf0_hash(buf)

  _kdf1_ref(u8_k0, kctx) ::
    return this.opaque_a._kdf1_ref(u8_k0, kctx.kx_a)

  async _kdf2_loc(hk1ref, kctx) ::
    let k1mid = await this.opaque_a._kdf2_loc(hk1ref, kctx.kx_a)
    kctx.hk1mid = as_hexkey(k1mid)
    return this.opaque_b._kdf2_loc(k1mid, kctx.kx_b)


const _okey_composed_ = @{}
  __proto__: _okey_ciphered_
  encipher(...args) :: return this._comp_.encipher(...args)
  decipher(...args) :: return this._comp_.decipher(...args)
  get _comp_() :: return @{} __proto__: this.kx_a, 0:this.hk2loc, 1:this.hk1ref

const _okey_composed_mid_ = @{}
  __proto__: _okey_composed_
  get _comp_() :: return @{} __proto__: this.kx_b, 0:this.hk2loc, 1:this.hk1mid


/* #__NO_SIDE_EFFECTS__ */
export function opaque_compose(opaque_a, opaque_b) ::
  let key_proto = opaque_b.ciphered ? _okey_composed_mid_
    : opaque_a.ciphered ? _okey_composed_
    : _okey_

  return @{} __proto__: _opaque_composed_, opaque_a, opaque_b
    key_proto, ciphered: key_proto.ciphered

