import {utf8_to_u8, u8_to_utf8} from './subtle/utils.jsy'
import {u8_sha_256, opaque_shared_codec} from './subtle.jsy'
import {opaque_basic_api, kdf_sha_256} from './opaque_basic.jsy'

import @{}
  u8_hmac_sha_256
  u8_ecdsa_sha_256
  u8_fast_equal
from './subtle.jsy'


export const kdf_kctx_tail = kdf_inner =>
    async (u8_k0, kctx) =>
      _u8_mix_aaab( await kdf_inner(u8_k0), kctx.k_ec )

export const kdf_key_tail = kdf_inner =>
    async k1ref =>
      _u8_mix_aaab( await kdf_inner(k1ref), k1ref )


export const opaque_ecdsa_basic = Object.freeze @:
  ... opaque_basic_api

  _hmac: u8_hmac_sha_256
  _kdf1_ref: kdf_kctx_tail @ kdf_sha_256
  _kdf2_loc: kdf_key_tail @ kdf_sha_256

  key_proto: Object.freeze @
    bind_ecdsa_key_proto @:
      kdf_ec: kdf_sha_256
      ecdsa_signer: u8_ecdsa_sha_256.p521
      ecdsa_verify: u8_ecdsa_sha_256.verify


  async _init_key(is_new) ::
    const kctx = @{} __proto__: this.key_proto
    await kctx._init_eckey(is_new, kctx)
    return kctx

  as_session(...args) :: return this._clone @:
    key_proto: this.key_proto.as_session(...args)

  with_hmac(u8_key) ::
    const {hmac_sign} = this._hmac(u8_key)
    return this._clone @:
      _kdf1_ref: @\ u8_key, kctx =>>
        this._kdf1_ref @ await hmac_sign(u8_key), kctx


export function bind_ecdsa_key_proto(kw_cfg) ::
  return @{}
    ... bind_ecdsa_basic()
    ... bind_ecdsa_codec(kw_cfg)


export function bind_ecdsa_basic() ::
  return @{}
    ciphered: false
    k21pair() :: return [this.k2loc, this.k1ref]

    encode_utf8(utf8) ::
      return this.encode_content(utf8_to_u8(utf8))

    async decode_utf8(u8_record) ::
      const u8 = await this.decode_content(u8_record)
      if undefined !== u8 ::
        return u8_to_utf8(u8)

    async encode_content(u8) ::
      const {k1ref, k2loc} = this
      if k1ref && k2loc ::
        return await this._pack_opaque @:
          c:u8, l:k2loc

    async decode_content(u8_record) ::
      const {k1ref, k2loc, _kdf_secret} = this
      if u8_record && k1ref && k2loc ::
        const {c:u8} = await this._unpack_opaque(u8_record) || {}
        return u8



export function bind_ecdsa_codec({kdf_ec, ecdsa_signer, ecdsa_verify}) ::
  async function do_kctx_ec(kctx, ec_sign) ::
    kctx._ec_sign = ec_sign
    kctx.ec = await ec_sign.ec
    kctx.k_ec = await kdf_ec(kctx.ec)
    return kctx

  return @{}
    async validate(u8_record) ::
      if u8_record ::
        const res = await this._unpack_opaque(u8_record)
        return undefined !== res


    async _pack_opaque(obj_body) ::
      const {_ec_sign, _codec: {encode}} = this

      obj_body.e = await _ec_sign.ec
      const body = encode(obj_body)
      const {sig} = await _ec_sign(body)

      return encode @: z:sig, b:body


    async _unpack_opaque(u8_record) ::
      const {k2loc, _codec: {decode}} = this
      let obj_sig
      try :: obj_sig = decode(u8_record)
      catch err :: return // ignore decoding error

      const {z:sig, b:body} = obj_sig

      let obj_body
      try :: obj_body = decode(body)
      catch err :: return // ignore decoding error

      const {e: ec, l: _k2loc} = obj_body
      if ! u8_fast_equal @ k2loc, _k2loc ::
        return

      try ::
        if ! _u8_test_aaab( _k2loc, await kdf_ec(ec) ) ::
          return

        if ! await ecdsa_verify @ {ec, sig}, body ::
          return
      catch err :: return // ignore verify errors

      return obj_body

    _codec: opaque_shared_codec
    _init_eckey: (is_new, kctx) =>
      do_kctx_ec @ kctx, ecdsa_signer()

    as_session(ec_sign) ::
      if ! ec_sign ::
        ec_sign = ecdsa_signer()

      return @{} __proto__: this,
        as_session: null
        _init_eckey: (is_new, kctx) =>
          do_kctx_ec @ kctx, ec_sign


export function _u8_mix_aaab(a, b) ::
  const alen = a.length, blen = b.length
  for let i=3; i<alen; i+=4 ::
    a[i] = b[i % blen]
  return a

export function _u8_test_aaab(a, b) ::
  const alen = a.length, blen = b.length
  for let i=3; i<alen; i+=4 ::
    if a[i] !== b[i % blen] ::
      return false
  return true

