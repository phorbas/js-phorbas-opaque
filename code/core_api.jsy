import {as_arrbuf} from './subtle/utils.jsy'
import {u8_crypto_random} from './subtle/iso_random.jsy'


/* #__NO_SIDE_EFFECTS__ */
export const as_opaque_core = (opaque) => @:
  ciphered: opaque.ciphered

  from_random: n => opaque.from_random(n)
  from_content: content => opaque.from_content(content)
  from_hk21: hk21 => opaque.from_hk21(hk21)

  as_session: (...args) => as_opaque_core @ opaque.as_session(...args)
  as_core() :: return this


export const opaque_core_api = @{}
  // k0 is source material for hk1ref derivation

  async from_random(n) :: // k0
    let kctx = await this._init_key(true)
    kctx.hk1ref = await this._kdf1_ref(u8_crypto_random(n ?? 16), kctx)
    return this._from_kctx(kctx)

  async from_content(buf, k0_hash) :: // k0
    let kctx = await this._init_key(true)
    kctx.buf = buf = await as_arrbuf(buf)
    let k0 = !k0_hash ? buf : await this._kdf0_hash(buf)
    kctx.hk1ref = await this._kdf1_ref(k0, kctx)
    return this._from_kctx(kctx)

  // hk21 may be tuple of `[hk2loc, hk1ref]` or `hk1ref` alone; lazily avoids rehashing `hk2loc`
  async from_hk21(hk21) ::
    hk21 = await hk21
    let kctx = await this._init_key()
    if ! hk21.trim ::
      kctx.hk1ref = hk21[1]
      kctx.hk2loc = hk21[0]
    else kctx.hk1ref = hk21
    return this._from_kctx(kctx)

  as_session() :: return this


  //### Protected extension api ###
  // _init_key(is_new) : kctx // subclass responsibility
  // _finish_key(kctx) : kctx // subclass responsibility
  async _from_kctx(kctx) ::
    kctx.hk2loc ??= await this._kdf2_loc(kctx.k1ref, kctx)
    return this._finish_key(kctx)

  as_core() :: return as_opaque_core(this)

