import {okey_basic} from '../basic/key_basic.jsy'
import {opaque_basic} from '../basic/opaque_basic.jsy'
import {_rec_pack_raw, _rec_unpack_raw} from '../_rec_pack_codec.jsy'

import {as_arrbuf, as_hexkey, hex_to_u8} from '../subtle/utils.jsy'
import {u8_sha_256} from '../subtle/iso_sha2_hashes.jsy'
import {u8_hmac_sha_256} from '../subtle/iso_hmac_sha2.jsy'
import {u8_ecdsa_sha_256} from '../subtle/iso_ecdsa.jsy'


export const kdf_kctx_tail = kdf_inner =>
    async (u8_k0, kctx) =>
      _u8_mix_aaab( await kdf_inner(u8_k0), kctx.k_ec )

export const kdf_key_tail = kdf_inner =>
    async k1ref =>
      _u8_mix_aaab( await kdf_inner(k1ref), k1ref )


export const opaque_ecdsa_basic = /* #__PURE__ */ Object.freeze @:
  ... opaque_basic

  _hmac: u8_hmac_sha_256
  _kdf1_ref: kdf_kctx_tail @ u8_sha_256
  _kdf2_loc: kdf_key_tail @ u8_sha_256

  key_proto: Object.freeze @
    bind_ecdsa_key_proto @:
      kdf_ec: u8_sha_256
      ecdsa_signer: u8_ecdsa_sha_256.p521
      ecdsa_verify: u8_ecdsa_sha_256.verify


  async _init_key(is_new) ::
    const kctx = @{} __proto__: this.key_proto
    await kctx._init_eckey(is_new, kctx)
    return kctx

  as_session(...args) :: return this._clone @:
    key_proto: this.key_proto.as_session(...args)

  with_hmac(key) ::
    const {hmac_sign} = this._hmac(key)
    return this._clone @:
      _kdf1_ref: @\ key, kctx =>>
        this._kdf1_ref @ await hmac_sign(key), kctx
      _kdf2_loc: @\ key, kctx =>>
        this._kdf2_loc @ await hmac_sign(key), kctx


export function bind_ecdsa_key_proto(kw_cfg) ::
  return @{}
    __proto__: bind_ecdsa_basic()
    ... bind_ecdsa_codec(kw_cfg)


export function bind_ecdsa_basic() ::
  return @{}
    __proto__: okey_basic

    async sign_content(buf) ::
      buf = await as_arrbuf(buf)
      const {hk1ref, hk2loc} = this
      if hk1ref && hk2loc ::
        return await this._rec_pack @:
          c:buf, l: hex_to_u8(hk2loc)

    async verify_content(u8_record) ::
      const {hk1ref, hk2loc, _kdf_secret} = this
      if u8_record && hk1ref && hk2loc ::
        const {c:buf} = await this._rec_unpack(u8_record) || {}
        return buf



export function bind_ecdsa_codec({kdf_ec, ecdsa_signer, ecdsa_verify}) ::
  async function do_kctx_ec(kctx, ec_sign) ::
    kctx._ec_sign = ec_sign
    kctx.ec = await ec_sign.ec
    kctx.k_ec = await kdf_ec(kctx.ec)
    return kctx

  return @{}
    async validate(u8_record) ::
      if u8_record ::
        let res = await this._rec_unpack(u8_record)
        return undefined !== res


    async _rec_pack(obj_body) ::
      const {_ec_sign} = this

      obj_body.e = await _ec_sign.ec
      const body = await _rec_pack_raw(obj_body)
      const {sig} = await _ec_sign(body)

      return _rec_pack_raw @: z:sig, b:body


    async _rec_unpack(u8_record) ::
      const {hk2loc} = this
      let obj_sig
      try :: obj_sig = await _rec_unpack_raw(u8_record)
      catch err :: return // ignore decoding error

      const {z:sig, b:body} = obj_sig

      let obj_body
      try :: obj_body = await _rec_unpack_raw(body)
      catch err :: return // ignore decoding error

      const {e: ec, l: _k2loc} = obj_body
      if hk2loc !== as_hexkey(_k2loc) ::
        return

      try ::
        if ! _u8_test_aaab( _k2loc, await kdf_ec(ec) ) ::
          return

        if ! await ecdsa_verify @ {ec, sig}, body ::
          return
      catch err :: return // ignore verify errors

      return obj_body

    _init_eckey: (is_new, kctx) =>
      do_kctx_ec @ kctx, ecdsa_signer()

    as_session(ec_sign) ::
      if ! ec_sign ::
        ec_sign = ecdsa_signer()

      return @{} __proto__: this,
        as_session: null
        _init_eckey: (is_new, kctx) =>
          do_kctx_ec @ kctx, ec_sign


export function _u8_mix_aaab(a, b) ::
  a = a.buffer ? a :new Uint8Array(a)
  b = b.buffer ? b :new Uint8Array(b)
  const alen = a.length, blen = b.length
  for let i=3; i<alen; i+=4 ::
    a[i] = b[i % blen]
  return a

export function _u8_test_aaab(a, b) ::
  a = a.buffer ? a :new Uint8Array(a)
  b = b.buffer ? b :new Uint8Array(b)
  const alen = a.length, blen = b.length
  for let i=3; i<alen; i+=4 ::
    if a[i] !== b[i % blen] ::
      return false
  return true

