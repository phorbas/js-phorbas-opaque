#IF PLAT_ABSTRACT
  export function _bind_sha_digest(hash) ::
    return async function sha_digest_NNN(data) ::


#ELIF PLAT_WEB
  import {u8_maybe_utf8} from './utils.jsy'
  export function _bind_sha_digest(hash) ::
    const _digest_ = crypto.subtle
      .digest.bind @ crypto.subtle, { name: hash }

    return @\ data, n ::>
      const u8 = new Uint8Array @
        await _digest_ @
          u8_maybe_utf8 @ await data

      return undefined === n ? u8
        : u8.subarray(n)


#ELIF PLAT_NODEJS
  import {createHash} from 'crypto'
  export function _bind_sha_digest(hash) ::
    return @\ data, n ::>
      const u8 = new Uint8Array @
        createHash(hash.replace('-',''))
        .update @ await data
        .digest()

      return undefined === n ? u8
        : u8.subarray(n)


export const u8_sha_256 = _bind_sha_digest('SHA-256')
export const u8_sha_384 = _bind_sha_digest('SHA-384')
export const u8_sha_512 = _bind_sha_digest('SHA-512')

