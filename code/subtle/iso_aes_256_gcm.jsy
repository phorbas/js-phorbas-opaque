import {subtle_api, U8} from './iso_crypto_api.jsy'

export function _bind_aes_256_gcm() ::
  const name = 'AES-GCM', tagLength = 128

  const _import_aes_gcm_raw = aeskey =>
    subtle_api.importKey @ 'raw', aeskey.subarray(-32),
      {name, length: 256}, false, ['encrypt', 'decrypt']

  return @{}
    async encrypt(raw_content, key_cipher, key_iv) ::
      key_cipher = await _import_aes_gcm_raw(key_cipher)
      return new U8 @ await subtle_api.encrypt @
        @{} name, tagLength,
            iv: key_iv.subarray(-12) // IV of 96 bits (12 bytes) 
        key_cipher, raw_content

    async decrypt(enc_content, key_cipher, key_iv, absent) ::
      try ::
        key_cipher = await _import_aes_gcm_raw(key_cipher)
        return new U8 @ await subtle_api.decrypt @
          @{} name, tagLength,
              iv: key_iv.subarray(-12) // IV of 96 bits (12 bytes) 
          key_cipher, enc_content
      catch err ::
        if undefined !== absent ::
          return absent

        err = new AggregateError([err])
        err.aes_decrypt = true
        throw err

export const u8_aes_256_gcm = /* #__PURE__ */ _bind_aes_256_gcm()
export {u8_aes_256_gcm as u8_aes_gcm}

