import { u8_to_utf8, utf8_to_u8 } from 'u8-utils'
export { u8_to_utf8, utf8_to_u8 }


export async function as_arrbuf(c) ::
  c = await c
  if c instanceof ArrayBuffer || ArrayBuffer.isView(c) ::
    return c

  if c.trim ::
    return utf8_to_u8(c)

  if ! c.arrayBuffer ::
    c = new Blob(!c ? [] : c[Symbol.iterator] ? c : [c])
  return c.arrayBuffer()


export const u8_subarray = (buf, ...args) => buf &&
  (1 === buf.BYTES_PER_ELEMENT ? buf : new Uint8Array(buf))
    .subarray(...args)

