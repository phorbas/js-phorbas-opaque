import {subtle_api, U8} from './iso_crypto_api.jsy'
import {ecc_by_len} from './utils.jsy'

export function _bind_ecdsa(hash) ::
  const name = 'ECDSA'
  return @{}
    p521: () => _ecdsa_signer('P-521')
    p384: () => _ecdsa_signer('P-384')
    p256: () => _ecdsa_signer('P-256')
    verify: ecdsa_verify
    hash


  async function ecdsa_verify(ec_sig_obj, u8) ::
    const {ec, sig} = ec_sig_obj
    const namedCurve = ecc_by_len(ec.length)
    if ! namedCurve :: return

    const _kind = @{} name, hash, namedCurve
    const ec_pub = subtle_api.importKey @
      'spki', ec, _kind, false, ['verify']

    return subtle_api.verify @
      _kind, await ec_pub, sig, u8


  function _ecdsa_signer(namedCurve) ::
    const _kind = {name, namedCurve, hash}
    const _ec_ = subtle_api.generateKey @
      _kind, false, ['sign']

    const ec = _ec_.then @ async _ec_ => new U8 @
      await subtle_api.exportKey('spki', _ec_.publicKey)
    return Object.assign @ ecdsa_sign, @{}
      ec, ecdsa_sign, ecdsa_verify
      hash, namedCurve


    async function ecdsa_sign(u8) ::
      const {privateKey} = await _ec_
      const u8_sig = new U8 @
        await subtle_api.sign @
          _kind, privateKey, u8

      return @{} ec: await ec, sig: u8_sig


export const u8_ecdsa_sha_256 = /* #__PURE__ */ _bind_ecdsa('SHA-256')
export const u8_ecdsa_sha_384 = /* #__PURE__ */ _bind_ecdsa('SHA-384')
export const u8_ecdsa_sha_512 = /* #__PURE__ */ _bind_ecdsa('SHA-512')

export @{}
  u8_ecdsa_sha_256 as u8_ecdsa

