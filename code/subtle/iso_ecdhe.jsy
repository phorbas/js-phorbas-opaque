import {ecc_by_len} from './utils.jsy'


#IF PLAT_ABSTRACT
  export function _bind_ecdhe(hash) ::
    return @{}


#ELIF PLAT_WEB
  export function _bind_ecdhe() ::
    const n_bits = @{} 'P-521': 528, 'P-384': 384, 'P-256': 256,
    const {subtle} = crypto

    return @{}
      p521: @=> _gen_ecdhe('P-521')
      p384: @=> _gen_ecdhe('P-384')
      p256: @=> _gen_ecdhe('P-256')
      mirror: other => _ecdhe_mirror(other, _gen_ecdhe)
      _with_ecdh

    function _gen_ecdhe(namedCurve) ::
      const _ec_ = subtle.generateKey @
        {name: 'ECDH', namedCurve}, false, ['deriveBits']
      return _with_ecdh(namedCurve, _ec_)


    function _with_ecdh(namedCurve, _ec_) ::
      const _kind = @{} name: 'ECDH', namedCurve
      return Object.assign @ ecdh_derive, @{}
        ecdh: _ec_.then @\ _ec_ =>> new Uint8Array @
          await subtle.exportKey('raw', _ec_.publicKey)

        ecdh_derive
        namedCurve

      async function ecdh_derive(ecdh) ::
        const ec_pub = await subtle.importKey @
          'raw', await ecdh, _kind, false, []

        return new Uint8Array @
          await subtle.deriveBits @ 
            @{} ... _kind, public: ec_pub
            (await _ec_).privateKey
            n_bits[namedCurve]


#ELIF PLAT_NODEJS
  import {createECDH} from 'crypto'

  const _node_namedCurves = @{}
    'P-521': 'secp521r1'
    'P-384': 'secp384r1'
    'P-256': 'prime256v1'

  export function _bind_ecdhe() ::
    return @{}
      p521: @=> _gen_ecdhe('P-521')
      p384: @=> _gen_ecdhe('P-384')
      p256: @=> _gen_ecdhe('P-256')
      mirror: other => _ecdhe_mirror(other, _gen_ecdhe)
      _with_ecdh
      _node_namedCurves

    function _gen_ecdhe(namedCurve) ::
      const _ecdh_ = createECDH(_node_namedCurves[namedCurve])
      _ecdh_.generateKeys()
      return _with_ecdh(namedCurve, _ecdh_)


    function _with_ecdh(namedCurve, _ecdh_) ::
      return Object.assign @ ecdh_derive, @{}
        ecdh: Promise.resolve @ new Uint8Array @ _ecdh_.getPublicKey()
        ecdh_derive, namedCurve

      async function ecdh_derive(ecdh) ::
        return new Uint8Array @
          _ecdh_.computeSecret @ await ecdh


export const u8_ecdhe = _bind_ecdhe()

function _ecdhe_mirror(ecdh_other, _gen_ecdhe) ::
  const ec_len = (0 | ecdh_other) === ecdh_other
    ? 0 | ecdh_other
    : ecdh_other.byteLength || ecdh_other.length

  const namedCurve = ecc_by_len(ec_len)
  return _gen_ecdhe(namedCurve)

