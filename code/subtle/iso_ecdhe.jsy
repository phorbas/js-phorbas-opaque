import {subtle_api, U8} from './iso_crypto_api.jsy'
import {ecc_by_len} from './utils.jsy'


export function _bind_ecdhe() ::
  const name = 'ECDH'
  const n_bits = {'P-521': 528, 'P-384': 384, 'P-256': 256}

  return @{}
    p521: () => _gen_ecdhe('P-521')
    p384: () => _gen_ecdhe('P-384')
    p256: () => _gen_ecdhe('P-256')
    mirror: other => _ecdhe_mirror(other, _gen_ecdhe)
    _with_ecdh

  function _gen_ecdhe(namedCurve) ::
    const _ec_ = subtle_api.generateKey @
      {name, namedCurve}, false, ['deriveBits']
    return _with_ecdh(namedCurve, _ec_)


  function _with_ecdh(namedCurve, _ec_) ::
    const _kind = {name, namedCurve}
    return Object.assign @ ecdh_derive, @{}
      ecdh: _ec_.then @\ _ec_ =>> new U8 @
        await subtle_api.exportKey('raw', _ec_.publicKey)

      ecdh_derive
      namedCurve

    async function ecdh_derive(ecdh) ::
      const ec_pub = await subtle_api.importKey @
        'raw', await ecdh, _kind, false, []

      return new U8 @
        await subtle_api.deriveBits @ 
          @{} ... _kind, public: ec_pub
          (await _ec_).privateKey
          n_bits[namedCurve]


  function _ecdhe_mirror(ecdh_other, _gen_ecdhe) ::
    const ec_len = (0 | ecdh_other) === ecdh_other
      ? 0 | ecdh_other
      : ecdh_other.byteLength || ecdh_other.length

    const namedCurve = ecc_by_len(ec_len)
    return _gen_ecdhe(namedCurve)


export const u8_ecdhe = /* #__PURE__ */ _bind_ecdhe()

