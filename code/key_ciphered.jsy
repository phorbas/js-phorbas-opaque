import {as_arrbuf} from './subtle/utils.jsy'
import {u8_crypto_random} from './subtle/iso_random.jsy'
import {_rec_pack_raw, _rec_unpack_raw} from './_rec_pack_codec.jsy'
import {_okey_ciphered_} from './key.jsy'

/* #__NO_SIDE_EFFECTS__ */
export const kdf_random_16 = () => u8_crypto_random(16)


/* #__NO_SIDE_EFFECTS__ */
export const bind_okey_ciphered = (cipher, mixin) =>
  _bind_okey_ciphered @ cipher, @{}
    _rec_pack: _rec_pack_raw
    _rec_unpack: _rec_unpack_raw
    ...mixin


/* #__NO_SIDE_EFFECTS__ */
export function _bind_okey_ciphered(cipher, mixin) ::
  return @{}
    __proto__: _okey_ciphered_

    ...mixin

    _kdf_iv: kdf_random_16
    // _kdf_secret: k1ref => k1ref

    async encipher(content=this.buf) ::
      content = await as_arrbuf(content)

      const {k1ref, k2loc, _kdf_secret, _kdf_iv} = this
      if k1ref && k2loc ::
        const u8_secret = ! _kdf_secret ? k1ref
          : await _kdf_secret(k1ref)

        const iv = await _kdf_iv(k2loc)

        const u8_enc = await cipher.encrypt @
          content, u8_secret, iv

        return await this._rec_pack @:
          c:u8_enc, v:iv, l:k2loc

    async decipher(buf_record) ::
      const {k1ref, _kdf_secret} = this
      if buf_record && k1ref ::
        const {v:iv, c:u8_enc} =
          await this._rec_unpack(buf_record) || {}

        const u8_secret = ! _kdf_secret ? k1ref
          : await _kdf_secret(k1ref)

        if u8_enc && u8_secret && iv ::
          return await cipher.decrypt @
            u8_enc, u8_secret, iv

