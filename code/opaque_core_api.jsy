import {u8_maybe_utf8} from './subtle/utils.jsy'
import {init_opaque_shared_codec} from './subtle/codec.jsy'


export const opaque_core_api = @{}
  async _from_kctx(kctx) ::
    kctx.k2loc = await this._kdf2_loc(kctx.k1ref, kctx)
    return this._finish_key(kctx)

  async from_k0(u8_k0) ::
    const kctx = await this._init_key(true)
    kctx.k1ref = await this._kdf1_ref(u8_k0, kctx)
    return this._from_kctx(kctx)

  async from_k1ref(k1ref) ::
    const kctx = await this._init_key(false)
    kctx.k1ref = k1ref
    return this._from_kctx(kctx)

  async from_k2loc(k2loc) ::
    const kctx = await this._init_key(false)
    kctx.k1ref = undefined
    kctx.k2loc = k2loc
    return this._finish_key(kctx)

  async from_k21pair(k21pair) ::
    const kctx = await this._init_key(false)
    if ! Array.isArray(k21pair) ::
      kctx.k1ref = k21pair
      return this._from_kctx(kctx)

    kctx.k1ref = k21pair[1]
    kctx.k2loc = k21pair[0]
    return this._finish_key(kctx)

  async from_content(u8_buf) ::
    return this.from_k0 @
      await this._kdf0_hash @
        u8_maybe_utf8(u8_buf)

  from_random(kctx) ::
    return this.from_k0 @
      this._kdf0_random()

  from_u8(u8_k0) ::
    return this.from_k0 @ u8_k0

  as_session() :: return this
  init_shared_codec: init_opaque_shared_codec

  as_core() :: return @{}
    ciphered: this.ciphered

    from_k1ref: k1ref => this.from_k1ref(k1ref)
    from_k2loc: k2loc => this.from_k2loc(k2loc)
    from_k21pair: k21pair => this.from_k21pair(k21pair)
    from_content: u8_buf => this.from_content(u8_buf)
    from_random: @=> this.from_random()
    from_u8: u8_raw => this.from_u8(u8_raw)

    as_session: (...args) => this.as_session(...args).as_core()

    init_shared_codec: init_opaque_shared_codec
    as_core() :: return this

