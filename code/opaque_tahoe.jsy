import {utf8_to_u8, u8_to_utf8,} from './subtle/utils.jsy'
import {opaque_basic_api, kdf_random_16} from './opaque_basic.jsy'
import {u8_aes_256_gcm, u8_hmac_sha_256} from './subtle.jsy'


export default opaque_tahoe
export const opaque_tahoe = @{}
  ... opaque_basic_api
  _hmac: u8_hmac_sha_256

  key_proto: @{}
    ... bind_tahoe(u8_aes_256_gcm)

  with_hmac(u8_key) ::
    return @{}
      __proto__: this
      as_session: null
      _kdf1_ref: u8_key && this._hmac(u8_key).sign

  as_session(u8_key) ::
    return this.with_hmac(u8_key)


export const tahoe = @=> opaque_tahoe
export const tahoe_hmac = u8_key =>
  opaque_tahoe.with_hmac(u8_key)


export function bind_tahoe(cipher) ::
  return @{}
    encipher_utf8(utf8) ::
      return this.encipher @ utf8_to_u8(utf8)

    async encipher(u8_content) ::
      const {k1ref, k2loc, _codec} = this
      if k1ref && k2loc ::
        const u8_secret = ! _codec.kdf_secret ? k1ref
          : await _codec.kdf_secret(k1ref)

        const u8_iv = await _codec.kdf_iv(k2loc)

        const u8_enc = await cipher.encrypt @
          u8_content, u8_secret, u8_iv

        return await this._pack_opaque @
          u8_enc, u8_iv, k2loc

    async decipher_utf8(record) ::
      const u8 = await this.decipher(record)
      if undefined !== u8 ::
        return u8_to_utf8(u8)

    async decipher(record) ::
      const {k1ref, k2loc, _codec} = this
      if record && k1ref && k2loc ::
        const [u8_iv, u8_enc] =
          await this._unpack_opaque(record) || []

        const u8_secret = ! _codec.kdf_secret ? k1ref
          : await _codec.kdf_secret(k1ref)

        if u8_enc && u8_secret && u8_iv ::
          return await cipher.decrypt @
            u8_enc, u8_secret, u8_iv


    _pack_opaque(u8_enc, u8_iv, k2loc) ::
      return this._codec.encode @# u8_iv, u8_enc

    _unpack_opaque(record) ::
      return this._codec.decode @ record


    _codec: @{}
      // kdf_secret: k1ref => k1ref
      kdf_iv: kdf_random_16
      encode: (...args) => args
      decode: (...args) => args

    init_codec(ex_codec) ::
      this._codec = @{}
        ... this._codec
        ... ex_codec
      return this

