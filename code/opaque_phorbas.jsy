import {cbor_encode, cbor_decode, u8_to_hex} from 'cbor-codec'
import {opaque_basic_api} from './opaque_basic.jsy'
import @{}
  u8_aes_256_gcm
  u8_hmac_sha_256
  u8_ecdsa_p521_256
  u8_timing_equal
from './subtle.jsy'

function _check_all_u8(lst) ::
  for const e of lst ::
    if ! @ e instanceof Uint8Array ::
      console.log @: e
      throw new TypeError()
  return lst

export const phorbas_key_proto = @{}
  ... bind_opaque_phorbas(u8_aes_256_gcm)

  async _unpack_opaque(rec_cbor) ::
    let sig, body, ec, _k2loc, u8_enc
    try ::
      ;[sig, body] = _check_all_u8 @ cbor_decode(rec_cbor)
      ;[ec, _k2loc, u8_enc] = _check_all_u8 @ cbor_decode(body)
    catch err ::
      return // ignore cbor decoding error

    const p_verify = this._ecdsa_verify({ec, sig}, body)
    const k2_eq = u8_timing_equal(this.k2loc, _k2loc)
    const verify = await p_verify
    if verify && k2_eq ::
      return u8_enc

  async pack_opaque(u8_enc, k1ref, k2loc) ::
    const {_ecdsa_sign} = this
    const body = cbor_encode @#
      await _ecdsa_sign.ec, k2loc, u8_enc
    const {sig} = await _ecdsa_sign(body)
    return cbor_encode @#
      sig, body

  async validate(rec_cbor) ::
    const u8_enc = await this._unpack_opaque(rec_cbor)
    return u8_enc instanceof Uint8Array



export default opaque_phorbas
export const opaque_phorbas = @{} __proto__: @{}
  ... opaque_basic_api

  _ecdsa: u8_ecdsa_p521_256
  _hmac: u8_hmac_sha_256
  _kdf1_ref(u8_k0, kctx) ::
    return this._hmac(kctx.ec).sign(u8_k0)

  key_proto: phorbas_key_proto

  async _initKey(is_new) ::
    const _ecdsa_sign = this._ecdsa.sign()
    return @{} __proto__: this.key_proto
      _ecdsa_sign, ec: await _ecdsa_sign.ec
      _ecdsa_verify: this._ecdsa.verify


export function bind_opaque_phorbas(cipher) ::
  return @{}
    async encipher(u8_content) ::
      const {k1ref, k2loc} = this
      const u8_enc = await cipher.encrypt @
        u8_content, k1ref, k2loc

      return await this.pack_opaque @
        u8_enc, k1ref, k2loc

    async decipher(rec_cbor) ::
      const {k1ref, k2loc} = this
      if undefined === k1ref || undefined === k2loc ::
        return

      const u8_enc = await this._unpack_opaque(rec_cbor)
      if undefined === u8_enc ::
        return

      return await cipher.decrypt @
        u8_enc, k1ref, k2loc

