import {describe, it} from '#test_bdd'
import {expect} from 'chai'

import {opaque_tahoe, tahoe_hmac} from '@phorbas/opaque'
import {utf8_to_u8, hex_to_u8} from '@phorbas/opaque'

import { _expect_core_api, _expect_full_api, _expect_okey } from '../_check_opaque_utils.jsy'


describe @ 'opaque_tahoe', @::
  describe @ 'shape', @::
    it @ 'shape of opaque_tahoe', @::>
      await _expect_full_api @ opaque_tahoe

    it @ 'shape of opaque_tahoe.as_core()', @::>
      await _expect_core_api @ opaque_tahoe.as_core()

    it @ 'shape of tahoe_hmac', @::>
      await _expect_full_api @ tahoe_hmac @
        new Uint8Array @# 10,12,14,16


  it @ 'opaque_tahoe.from_content', @::>
    const test_content = 'some sample unit test content'

    const kv_test = @{}
      hk1ref: 'd421f311dff096fcae9f934b7ca417297bb2bc9e550709fb416a5e45bc5d19ea'
      value: hex_to_u8 @ 'a36163582d67f3efd56df4ba45ee6e23fed12d38c5cbf33494f1b35ece8feeecf15eadeb187e4fda00199b9da2b4af56bbc261765086b528ce6f3fea6a64fcd8824ae0232b616c582013fa1fd5c392b22ba346390074b82c41fc4c48999f4dc2feae4f349c1bfb29ea'

    ::
      const p_okey = opaque_tahoe.from_content(test_content, true)
      expect(p_okey).to.be.a('promise')

      const okey = await p_okey
      await _expect_okey(okey, true)

      expect(okey.hk1ref).to.be.deep.equal @ kv_test.hk1ref

      expect(okey.encipher).to.be.a('function')
      expect(okey.decipher).to.be.a('function')

      const p_u8_enc = okey.encipher(test_content)
      expect(p_u8_enc).to.be.a('promise')

      const u8_enc = await p_u8_enc
      expect(u8_enc).to.be.an.instanceof(Uint8Array)

      return

    ::
      const p_okey = opaque_tahoe.from_k1ref(kv_test.hk1ref)
      expect(p_okey).to.be.a('promise')

      const okey = await p_okey
      await _expect_okey(okey, true)

      expect(okey.hk1ref).to.equal @ kv_test.hk1ref

      const p_u8_dec = okey.decipher(kv_test.value)
      expect(p_u8_dec).to.be.a('promise')

      const u8_dec = await p_u8_dec
      expect(u8_dec).to.be.an.instanceof(Uint8Array)
      expect(u8_dec).to.be.deep.equal @ test_content


  it @ 'tahoe_hmac.from_content', @::>
    const okey = await tahoe_hmac('some hmac key')
      .from_content @ new Uint8Array @# 10,12,14,16

    await _expect_okey(okey, true)

    expect(okey.hk1ref)
    .to.equal @ "2bfc553c3ac54f041e02ffc99714981f3084a382748bd9b594317d2f4ec9e2fc"

    expect(okey.hk2loc)
    .to.equal @ "b0040d915ea477a0824168347665f6d7d17189907fc8b0d4b7dfd4bb3f01e533"

