import {describe, it} from 'node:test'
import {expect} from 'chai'

import @{}
  u8_ecdh_p256
  u8_ecdh_p384
  u8_ecdh_p521
from '@phorbas/opaque/esm/subtle.js'

import {hex_to_u8, u8_to_hex} from 'cbor-codec'

describe @ 'subtle/iso_ecdh', @::

  for let [ecdh_namedCurve, u8_ecdh_fn] of [
      ['P-521', u8_ecdh_p521],
      ['P-384', u8_ecdh_p384],
      ['P-256', u8_ecdh_p256],
    ] ::

    function isa_ecdh_api(each) ::
      expect(each.ec).to.be.not.null
      expect(each.namedCurve).to.equal(ecdh_namedCurve)
      expect(each.exportKey).to.be.a('function')

      expect(each.deriveBits).to.be.a('function')
      expect(each.deriveKey).to.be.a('function')


    describe @ `ECDH "${ecdh_namedCurve}"`, @::

      it @ 'shape', @::>
        expect(u8_ecdh_fn).to.be.a('function')
        expect(u8_ecdh_fn.generateKey).to.be.a('function')
        expect(u8_ecdh_fn.importKey).to.be.a('function')


      it @ 'invoke shape', @::>
        let ans = u8_ecdh_fn()
        expect(ans).to.be.a('promise')
        ans = await ans

        expect(ans.ecdh).to.be.a('promise')
        expect(ans.privateKey).to.be.equal(ans)

        isa_ecdh_api(ans)
        isa_ecdh_api(ans.privateKey)
        isa_ecdh_api(ans.publicKey)


      it @ 'generateKey() shape', @::>
        let ans = u8_ecdh_fn.generateKey()
        expect(ans).to.be.a('promise')
        ans = await ans

        isa_ecdh_api(ans.privateKey)
        isa_ecdh_api(ans.publicKey)


      it @ 'deriveBits', @::>
        const a = await u8_ecdh_fn()
        const b = await u8_ecdh_fn()

        const p_ab_ss = a.deriveBits @ b.ecdh
        const p_ba_ss = b.deriveBits @ a.ecdh

        expect(p_ab_ss).to.be.a('promise')
        expect(p_ba_ss).to.be.a('promise')

        const ab_ss = await p_ab_ss
        expect(ab_ss).to.be.instanceof(ArrayBuffer)

        const ba_ss = await p_ba_ss
        expect(ba_ss).to.be.instanceof(ArrayBuffer)

        expect @ new Uint8Array(ab_ss)
        .to.deep.equal @ new Uint8Array(ba_ss)


      for let [keyKind, format] of [
            ['privateKey', 'pkcs8'],
            ['privateKey', 'jwk'],

            ['publicKey', 'raw'],
            ['publicKey', 'spki'],
            ['publicKey', 'jwk'],
          ] ::


        it @ `export "${format}" ${keyKind}`, @::>
          let ec_pair = await u8_ecdh_fn.generateKey()

          let out_key = ec_pair[keyKind].exportKey(format)
          expect(out_key).to.be.a('promise')
          out_key = await out_key

          if 'jwk' !== format ::
            expect(out_key).to.be.instanceof(ArrayBuffer)


        it @ `import "${format}" ${keyKind}`, @::>
          let ec_pair = await u8_ecdh_fn.generateKey()

          let out_key = ec_pair[keyKind].exportKey(format)
          expect(out_key).to.be.a('promise')
          out_key = await out_key

          let usages_rt = 'privateKey' === keyKind ? undefined : []
          let rt_key = u8_ecdh_fn.importKey(format, out_key, usages_rt)
          expect(rt_key).to.be.a('promise')
          rt_key = await rt_key

          isa_ecdh_api(rt_key)

          let rt_out_key = rt_key.exportKey(format)
          expect(rt_out_key).to.be.a('promise')
          rt_out_key = await rt_out_key

