import {describe, it} from '#test_bdd'
import {expect} from 'chai'

import {opaque_ecdsa_basic} from '@phorbas/opaque'
import {hex_to_u8, u8_to_utf8} from '@phorbas/opaque'

import { _expect_core_api, _expect_full_api, _expect_okey } from '../_check_opaque_utils.jsy'


describe @ 'opaque ecdsa basic', @::
  describe @ 'shape', @::
    it @ 'shape of opaque_ecdsa_basic', @::>
      await _expect_full_api @ opaque_ecdsa_basic

    it @ 'shape of opaque_ecdsa_basic.as_core()', @::>
      await _expect_core_api @ opaque_ecdsa_basic.as_core()


  const test_content = 'some sample unit test content'
  const kv_test = @{}
    hk1ref: '3567ba84b2a3c4ae916a40513852915aeeb1f6e9dff35e684c875b0865bf82a4'
    hk2loc: 'f2f634842fc696aeb4673b519074225aa534e5e93211bd6858682c0863bd95a4'
    value: hex_to_u8 @ 'a2617a5884000f1e27acdba9214848d3b9e9158403ee3cafe91c928553f050f1912a1835909e1148c63c9d0cc93b2ea96e2f6d527af33ce71286dd2d756f9af951d4d1400b4aab01ab7a679f3a9ded5326aece0fc50510ecc91e1ab66211d4bf196e05cda560f601fd1d75df3f37177ecb9581cb688ef5ece4b57f7a161cb755bea8b8faff87071625616258e8a36163581d736f6d652073616d706c6520756e6974207465737420636f6e74656e74616c5820f2f634842fc696aeb4673b519074225aa534e5e93211bd6858682c0863bd95a46165589e30819b301006072a8648ce3d020106052b81040023038186000400cf4e96ee749b895581a7940c954b21e431451de76f28895eaee92070add8a275a3588bc7c2ff7976a0ab8cd31672805513b3951b2016ca55de8842270e18e4b6b4013c286b2048f9d00b4d7abed32b2de58c2792e95c619e6410c220cac64b1e27e4eae531860a78a7d447be0e1b61bda180db15bab67470a2eb070697a4a271ffec08'


  if 0 ::
    return it.only @ 'REGEN kv_test data', @::>
      const okey = await opaque_ecdsa_basic.from_random()
      const rec = await okey.sign_content(test_content)

      console.log @ `
          const kv_test = @{}
            hk1ref: "'${okey.hk1ref}'"
            hk2loc: "'${okey.hk2loc}'"
            value: hex_to_u8 @ "'${u8_to_hex @ rec}'"
        `


  it @ 'two from_random', @::>
    const okey_a = await opaque_ecdsa_basic.from_random()
    const okey_b = await opaque_ecdsa_basic.from_random()

    expect(okey_a.hk1ref).to.not.equal(okey_b.hk1ref)
    expect(okey_a.hk2loc).to.not.equal(okey_b.hk2loc)

    // ecdsa algorithm uses an ephemeral nonce
    const a_rec = await okey_a.sign_content(test_content)
    const a2_rec = await okey_a.sign_content(test_content)
    expect(a_rec).to.not.deep.equal(a2_rec)

    const b_rec = await okey_b.sign_content(test_content)
    expect(b_rec).to.not.deep.equal(a_rec)


  it @ 'two from_content should have different nonces', @::>
    const okey_a = await opaque_ecdsa_basic.from_content(test_content)
    const okey_b = await opaque_ecdsa_basic.from_content(test_content)

    expect(okey_a.hk1ref).to.not.equal(okey_b.hk1ref)
    expect(okey_a.hk2loc).to.not.equal(okey_b.hk2loc)

    // ecdsa algorithm uses an ephemeral nonce
    const a_rec = await okey_a.sign_content(test_content)
    const a2_rec = await okey_a.sign_content(test_content)
    expect(a_rec).to.not.deep.equal(a2_rec)

    const b_rec = await okey_b.sign_content(test_content)
    expect(b_rec).to.not.deep.equal(a_rec)


  it @ 'from_random', @::>
    const okey = await opaque_ecdsa_basic.from_random()
    const p_rec = okey.sign_content(test_content)
    expect(p_rec).to.be.a('promise')

    const rec = await p_rec
    expect(rec).to.be.an.instanceof(Uint8Array)

    const p_check = okey.validate(rec)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.verify_content(rec)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(u8_to_utf8(ans)).to.equal(test_content)


  describe @ 'known', @::
    it @ 'from_hk21 with hk1ref', @::>
      const okey = await opaque_ecdsa_basic.from_hk21(kv_test.hk1ref)

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.verify_content(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans

      expect(ans).to.be.an.instanceof(Uint8Array)
      expect(u8_to_utf8(ans)).to.equal(test_content)


    it @ 'from_hk21 with hk2loc', @::>
      const okey = await opaque_ecdsa_basic.from_hk21([kv_test.hk2loc])

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.verify_content(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans
      expect(ans).to.be.undefined


    it @ 'from_hk21 with mismatched hk1ref data', @::>
      const okey = await opaque_ecdsa_basic.from_hk21(kv_test.hk1ref)

      ::
        const ans = await okey.verify_content(kv_test.value)
        expect(u8_to_utf8(ans)).to.equal(test_content)

      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        const p_fail_ans = okey.verify_content(part)
        expect(p_fail_ans).to.be.a('promise')
        expect(await p_fail_ans).to.be.undefined


    it @ 'from_hk21 with mismatched hk2loc data', @::>
      const okey = await opaque_ecdsa_basic.from_hk21([kv_test.hk2loc])

      ::
        const ans = await okey.validate(kv_test.value)
        expect(ans).to.be.true

      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        const p_fail_ans = okey.validate(part)
        expect(p_fail_ans).to.be.a('promise')
        expect(await p_fail_ans).to.be.false

