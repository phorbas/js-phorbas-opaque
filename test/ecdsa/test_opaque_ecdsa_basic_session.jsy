import {describe, it} from 'node:test'
import {expect} from 'chai'

import {opaque_ecdsa_basic} from '@phorbas/opaque'

import @{}
  _expect_core_api,
  _expect_full_api,
from '../_opaque_test_utils.jsy'

import {hex_to_u8, u8_to_utf8} from 'u8-utils'


describe @ 'opaque ecdsa basic session', @::
  const opaque_session = opaque_ecdsa_basic.as_session()
  const test_content = 'some sample unit test content'
  const kv_test = @{}
    hk1ref: '445b9be84fee281dd632bc9acc45bf604e58d5b7d88ce774dec0289abee05b0f'
    hk2loc: 'b7bf04e8ade9b81ddf6c779adf9f2a60f079b2b770579774b8f8f39a5bb6790f'
    value: hex_to_u8 @ 'a2617a588401b8890626780fb4d5feddfff54464119f585cfd294a5aa74619134de07fe7f77e3439a7bdeaf232bcd552b982f97d7741add43f207fa8d591a158db3bcbd6067c9b01be277658bb362a4b5f5e8a2ff81f96ebb3a3a2e43eb574227f2afcefcb14392eb25590e998acf6fc242fee9bd88d3b8cc2874f3d8645dd9e87d80774db8a77f0f7616258e8a36163581d736f6d652073616d706c6520756e6974207465737420636f6e74656e74616c5820b7bf04e8ade9b81ddf6c779adf9f2a60f079b2b770579774b8f8f39a5bb6790f6165589e30819b301006072a8648ce3d020106052b81040023038186000401125e118570339d6db11029bffe3657671f15b2d12ac1d708e57e3be5ee03e256730379a5aabca5f46291636f911767a6376eda437f6ff52b5e4d8d16cfb675648201c26f87b79da946aa06ce9957d97ea77d9b2d89912f6b68d7ea75cdbc84e8b4c59eeabfab1baa1ede4395d3424c8cf32fb4c4ea31f129bedd4d736d1866b5c07139'

  describe @ 'shape', @::
    it @ 'shape of opaque_ecdsa_basic session', @::>
      await _expect_full_api @ opaque_session


  if 0 ::
    return it.only @ 'REGEN kv_test data', @::>
      const okey = await opaque_session.from_random()
      const rec = await okey.sign_content(test_content)

      console.log @ `
          const kv_test = @{}
            hk1ref: "'${okey.hk1ref}'"
            hk2loc: "'${okey.hk2loc}'"
            value: hex_to_u8 @ "'${u8_to_hex @ rec}'"
        `


  it @ 'two from_random', @::>
    const okey_a = await opaque_session.from_random()
    const okey_b = await opaque_session.from_random()

    expect(okey_a.hk1ref).to.not.equal(okey_b.hk1ref)
    expect(okey_a.hk2loc).to.not.equal(okey_b.hk2loc)

    // ecdsa algorithm uses an ephemeral nonce
    const a_rec = await okey_a.sign_content(test_content)
    const a2_rec = await okey_a.sign_content(test_content)
    expect(a_rec).to.not.deep.equal(a2_rec)

    const b_rec = await okey_b.sign_content(test_content)
    expect(b_rec).to.not.deep.equal(a_rec)


  it @ 'two from_content with same session should equal', @::>
    const okey_a = await opaque_session.from_content(test_content)
    const okey_b = await opaque_session.from_content(test_content)

    expect(okey_a.hk1ref).to.equal(okey_b.hk1ref)
    expect(okey_a.hk2loc).to.equal(okey_b.hk2loc)

    // ecdsa algorithm uses an ephemeral nonce
    const a_rec = await okey_a.sign_content(test_content)
    const a2_rec = await okey_a.sign_content(test_content)
    expect(a_rec).to.not.deep.equal(a2_rec)

    const b_rec = await okey_b.sign_content(test_content)
    expect(b_rec).to.not.deep.equal(a_rec)


  it @ 'from_random', @::>
    const okey = await opaque_session.from_random()
    const p_rec = okey.sign_content(test_content)
    expect(p_rec).to.be.a('promise')

    const rec = await p_rec
    expect(rec).to.be.an.instanceof(Uint8Array)

    const p_check = okey.validate(rec)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.verify_content(rec)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(u8_to_utf8(ans)).to.equal(test_content)


  describe @ 'known', @::
    it @ 'from_k1ref', @::>
      const okey = await opaque_session.from_hk21(kv_test.hk1ref)

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.verify_content(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans

      expect(ans).to.be.an.instanceof(Uint8Array)
      expect(u8_to_utf8(ans)).to.equal(test_content)

    it @ 'from_hk21 with hk2loc', @::>
      const okey = await opaque_session.from_hk21([kv_test.hk2loc])

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.verify_content(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans
      expect(ans).to.be.undefined


    it @ 'from_hk21 with mismatched hk1ref data', @::>
      const okey = await opaque_session.from_hk21(kv_test.hk1ref)

      ::
        const ans = await okey.verify_content(kv_test.value)
        expect(u8_to_utf8(ans)).to.equal(test_content)

      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        const p_fail_ans = okey.verify_content(part)
        expect(p_fail_ans).to.be.a('promise')
        expect(await p_fail_ans).to.be.undefined


    it @ 'from_hk21 with mismatched hk2loc data', @::>
      const okey = await opaque_session.from_hk21([kv_test.hk2loc])

      ::
        const ans = await okey.validate(kv_test.value)
        expect(ans).to.be.true


      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        const p_fail_ans = okey.validate(part)
        expect(p_fail_ans).to.be.a('promise')
        expect(await p_fail_ans).to.be.false

