import {expect} from 'chai'

import { u8_to_utf8 } from '@phorbas/opaque'


export async function _expect_core_api(opaque, opt={}) ::
  expect(opaque.from_hk21).to.be.a('function')
  expect(opaque.from_random).to.be.a('function')
  expect(opaque.from_content).to.be.a('function')
  expect(opaque.as_core).to.be.a('function')

  if ! opt.skip_kdf ::
    expect(opaque._kdf0_hash).to.be.undefined
    expect(opaque._kdf1_ref).to.be.undefined
    expect(opaque._kdf2_loc).to.be.undefined

  if ! opt.skip_okey ::
    expect(opaque.ciphered).to.be.a('boolean')

    await _expect_okey @
      opaque.from_random()
      opaque.ciphered

export async function _expect_full_api(opaque) ::
  expect(opaque._kdf0_hash).to.be.a('function')
  expect(opaque._kdf1_ref).to.be.a('function')
  expect(opaque._kdf2_loc).to.be.a('function')

  await _expect_core_api @ opaque, {skip_kdf: true}


const test_content = 'some sample unit test content'
export async function _expect_okey(okey, ciphered) ::
  okey = await okey

  expect(okey.hk1ref)
  .to.be.a('string')
  .to.have.length(64)

  expect(okey.hk2loc)
  .to.be.a('string')
  .to.have.length(64)

  expect(okey.ciphered).to.be.a('boolean')
  expect(okey.hk21).to.be.a('function')

  expect(okey.hk21())
  .to.be.an('array')
  .to.have.length(2)
  .to.deep.equal @#
    okey.hk2loc
    okey.hk1ref

  expect(okey[1]).to.equal @ okey.hk1ref
  expect(okey[0]).to.equal @ okey.hk2loc

  expect(okey.encode).to.be.a('function')
  expect(okey.decode).to.be.a('function')

  ::
    let enc_content = await okey.encode(test_content)
    let dec_content = await okey.decode(enc_content)
    if 'string' !== typeof dec_content ::
      dec_content = u8_to_utf8(dec_content)
    expect(dec_content).to.equal(test_content)


  if ! ciphered ::
    expect(okey.encipher).to.be.undefined
    expect(okey.decipher).to.be.undefined

    return true

  expect(okey.encipher).to.be.a('function')
  expect(okey.decipher).to.be.a('function')

  :: 
    const u8_enc_p = okey.encipher(test_content)

    expect(u8_enc_p).to.be.a('promise')

    const u8_enc = await u8_enc_p
    expect(u8_enc).to.be.an.instanceof(Uint8Array)

    const u8_dec_p = okey.decipher(u8_enc)
    expect(u8_dec_p).to.be.a('promise')

    const u8_dec = await u8_dec_p
    expect(u8_to_utf8(u8_dec)).to.equal @ test_content

