import {describe, it} from 'node:test'
import {expect} from 'chai'

import {opaque_ecdsa_tahoe} from '@phorbas/opaque/esm/index.js'

import @{}
  cbor_encode, cbor_decode,
  utf8_to_u8, u8_to_hex, hex_to_u8,
from 'cbor-codec'


describe @ 'opaque ecdsa tahoe', @::
  opaque_ecdsa_tahoe.init_shared_codec @:
    encode: cbor_encode
    decode: cbor_decode


  const u8_test_content = utf8_to_u8 @ 'some sample unit test content'
  const kv_test = @{}
    k1ref: hex_to_u8 @ 'd6ac973bac771d6caf21794b51dd1865a8ac073c6fcfc48c131a9e963645c1e7'
    k2loc: hex_to_u8 @ '48f0b93b4c4ac86c90b2b04b7bb5bd6576f4453cee691e8c74f3e496710c55e7'
    value: hex_to_u8 @ 'a2617a588401f0c87fa698d98be30a4e88e28048416f02acdf3ba2ee34fdb1d1e9b0bc418a98c8cfb59ab6c65ac03adba129010565ad25f60c9c2f871ac387ef6ffd92ef1e67cd001bd2d4946f1519d0d088d7b2f63efba21bc1beb01f319d9bcee7431c95c7b06f7d5001fcf1db0c2cbca0378f41995ecb11d0759995fac666f52d9dc8ddf5b3547a616259010ba46163582db7fef2ed9ce9ecab9c302452fcca937dcd8890191a13907466996403b8b4c4dd263b0cf62d0884e8cc2a1127826176508fe87814765d5230c8a38a8f30d63c53616c582048f0b93b4c4ac86c90b2b04b7bb5bd6576f4453cee691e8c74f3e496710c55e76165589e30819b301006072a8648ce3d020106052b81040023038186000401c6c3142dc455f269bf4c90105834130438c294a5631d67c46c9f0296378e974786237adda29a936ad00995a07b645bc35f0f2c112240aa43cf9eac2352f4110d4301872f889fc88e471ef2e5030a1c33d5f47cfce7003f2c23bd12d95590108ebb368e21c4bfa580bf027472190a49be287c9e8aeda93cc6a264be64b7cdaad7999a99'


  if 0 ::
    return it.only @ 'REGEN kv_test data', @::>
      const okey = await opaque_ecdsa_tahoe.from_random()
      const rec = await okey.encipher(u8_test_content)

      console.log @ `
          const kv_test = @{}
            k1ref: hex_to_u8 @ '${u8_to_hex @ okey.k1ref}'
            k2loc: hex_to_u8 @ '${u8_to_hex @ okey.k2loc}'
            value: hex_to_u8 @ '${u8_to_hex @ rec}'
        `


  it @ 'two from_random', @::>
    const okey_a = await opaque_ecdsa_tahoe.from_random()
    const okey_b = await opaque_ecdsa_tahoe.from_random()

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref


  it @ 'two from_content', @::>
    const okey_a = await opaque_ecdsa_tahoe.from_content @ u8_test_content
    const okey_b = await opaque_ecdsa_tahoe.from_content @ u8_test_content

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref

    expect @ okey_a.k2loc
    .to.not.deep.equal @ okey_b.k2loc


  it @ 'from_random', @::>
    const okey = await opaque_ecdsa_tahoe.from_random()
    const p_rec = okey.encipher(u8_test_content)
    expect(p_rec).to.be.a('promise')

    const rec = await p_rec
    expect(rec).to.be.an.instanceof(Uint8Array)

    const p_check = okey.validate(rec)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(rec)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content

  describe @ 'known', @::
    it @ 'from_k1ref', @::>
      const okey = await opaque_ecdsa_tahoe.from_k1ref(kv_test.k1ref)

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.decipher(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans

      expect(ans).to.be.an.instanceof(Uint8Array)
      expect(ans).to.be.deep.equal @ u8_test_content


    it @ 'from_k2ref', @::>
      const okey = await opaque_ecdsa_tahoe.from_k2loc(kv_test.k2loc)

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.decipher(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans
      expect(ans).to.be.undefined


    it @ 'from_k1ref invalid', @::>
      const okey = await opaque_ecdsa_tahoe.from_k1ref(kv_test.k1ref)

      expect @ await okey.decipher(kv_test.value)
      .to.be.deep.equal @ u8_test_content

      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        expect @ await okey.decipher(part)
        .to.be.undefined


    it @ 'from_k2ref invalid', @::>
      const okey = await opaque_ecdsa_tahoe.from_k2loc(kv_test.k2loc)

      expect @ await okey.validate(kv_test.value)
      .to.be.true

      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        expect @ await okey.validate(part)
        .to.be.false

