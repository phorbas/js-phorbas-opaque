import @{} opaque_ecdsa
#IF PLAT_WEB
  from '@phorbas/opaque/esm/web/index.mjs'
#ELIF PLAT_NODEJS
  from '@phorbas/opaque/esm/node/index.mjs'

import @{}
  cbor_encode, cbor_decode,
  utf8_to_u8, u8_to_hex, hex_to_u8,
from 'cbor-codec'

const { assert, expect } = require('chai')

describe @ 'opaque ecdsa basic', @::
  opaque_ecdsa.init_shared_codec @:
    encode: cbor_encode
    decode: cbor_decode


  const u8_test_content = utf8_to_u8 @ 'some sample unit test content'
  const kv_test = @{}
    k1ref: hex_to_u8 @ '3567ba84b2a3c4ae916a40513852915aeeb1f6e9dff35e684c875b0865bf82a4'
    k2loc: hex_to_u8 @ 'f2f634842fc696aeb4673b519074225aa534e5e93211bd6858682c0863bd95a4'
    value: hex_to_u8 @ 'a2617a5884000f1e27acdba9214848d3b9e9158403ee3cafe91c928553f050f1912a1835909e1148c63c9d0cc93b2ea96e2f6d527af33ce71286dd2d756f9af951d4d1400b4aab01ab7a679f3a9ded5326aece0fc50510ecc91e1ab66211d4bf196e05cda560f601fd1d75df3f37177ecb9581cb688ef5ece4b57f7a161cb755bea8b8faff87071625616258e8a36163581d736f6d652073616d706c6520756e6974207465737420636f6e74656e74616c5820f2f634842fc696aeb4673b519074225aa534e5e93211bd6858682c0863bd95a46165589e30819b301006072a8648ce3d020106052b81040023038186000400cf4e96ee749b895581a7940c954b21e431451de76f28895eaee92070add8a275a3588bc7c2ff7976a0ab8cd31672805513b3951b2016ca55de8842270e18e4b6b4013c286b2048f9d00b4d7abed32b2de58c2792e95c619e6410c220cac64b1e27e4eae531860a78a7d447be0e1b61bda180db15bab67470a2eb070697a4a271ffec08'


  if 0 ::
    return it.only @ 'REGEN kv_test data', @::>
      const okey = await opaque_ecdsa.from_random()
      const rec = await okey.encode(u8_test_content)

      console.log @ `
          const kv_test = @{}
            k1ref: hex_to_u8 @ '${u8_to_hex @ okey.k1ref}'
            k2loc: hex_to_u8 @ '${u8_to_hex @ okey.k2loc}'
            value: hex_to_u8 @ '${u8_to_hex @ rec}'
        `


  it @ 'two from_random', @::>
    const okey_a = await opaque_ecdsa.from_random()
    const okey_b = await opaque_ecdsa.from_random()

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref


  it @ 'two from_content', @::>
    const okey_a = await opaque_ecdsa.from_content @ u8_test_content
    const okey_b = await opaque_ecdsa.from_content @ u8_test_content

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref

    expect @ okey_a.k2loc
    .to.not.deep.equal @ okey_b.k2loc


  it @ 'from_random', @::>
    const okey = await opaque_ecdsa.from_random()
    const p_rec = okey.encode(u8_test_content)
    expect(p_rec).to.be.a('promise')

    const rec = await p_rec
    expect(rec).to.be.an.instanceof(Uint8Array)

    const p_check = okey.validate(rec)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decode(rec)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content

  describe @ 'known', @::
    it @ 'from_k1ref', @::>
      const okey = await opaque_ecdsa.from_k1ref(kv_test.k1ref)

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.decode(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans

      expect(ans).to.be.an.instanceof(Uint8Array)
      expect(ans).to.be.deep.equal @ u8_test_content


    it @ 'from_k2ref', @::>
      const okey = await opaque_ecdsa.from_k2loc(kv_test.k2loc)

      const p_check = okey.validate(kv_test.value)
      expect(p_check).to.be.a('promise')
      const check = await p_check
      expect(check).to.be.true

      const p_ans = okey.decode(kv_test.value)
      expect(p_ans).to.be.a('promise')
      const ans = await p_ans
      expect(ans).to.be.undefined


    it @ 'from_k1ref invalid', @::>
      const okey = await opaque_ecdsa.from_k1ref(kv_test.k1ref)

      expect @ await okey.decode(kv_test.value)
      .to.be.deep.equal @ u8_test_content

      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        expect @ await okey.decode(part)
        .to.be.undefined


    it @ 'from_k2ref invalid', @::>
      const okey = await opaque_ecdsa.from_k2loc(kv_test.k2loc)

      expect @ await okey.validate(kv_test.value)
      .to.be.true

      for const slice_args of [ [15,-15], [0,-15], [15], ] ::
        const part = kv_test.value.slice @ ...slice_args
        expect @ await okey.validate(part)
        .to.be.false

