import @{} opaque_ecdsa
#IF PLAT_WEB
  from '@phorbas/opaque/esm/web/index.mjs'
#ELIF PLAT_NODEJS
  from '@phorbas/opaque/esm/node/index.mjs'

import @{}
  cbor_encode, cbor_decode,
  utf8_to_u8, u8_to_hex, hex_to_u8,
from 'cbor-codec'
const { assert, expect } = require('chai')


describe @ 'opaque phorbas session', @::
  opaque_ecdsa.init_shared_codec @:
    encode: cbor_encode
    decode: cbor_decode


  const opaque_session = opaque_ecdsa.as_session()
  const u8_test_content = utf8_to_u8 @ 'some sample unit test content'
  const kv_test = @{}
    k1ref: hex_to_u8 @ 'e168cb531761616b1aaffd2877844664121e7c32b34d2639bd74225dca673a9d'
    k2loc: hex_to_u8 @ '8c862e79e421f8ecee739deecfb0b78c3588d3f7f44baea78fc5e8edbb51461a'
    value: hex_to_u8 @ 'a2617a588401bfc0da078fd49760219d5c4b93dc76f23c08f4d9c86e719e909936638d4e790035658bc664d1002161f601c196d03b1824867f0f65d87c5dcb6c33d557fa7db8c901672011164bac2b00e8d9ce04835a08eb14fb6bbe8408da1f06d350aa7630d95fe9a1820a20bcd44ea6da773c440e2a667db80de283f7f319b669aba9527627a719616259010ba46163582db6995461e580763d05ccc4f02c7c4fa7d08e359d94a8e083ca6da8dd4c4460e57cf76f6158bce4f004177cd30c617650945101f3713a331e4e261b3e6358f260616c58208c862e79e421f8ecee739deecfb0b78c3588d3f7f44baea78fc5e8edbb51461a6165589e30819b301006072a8648ce3d020106052b8104002303818600040041d210f7e713d6a31e9d7cc9e61d4c48cac00d2c75f66babd82e0f681bd17a948697f1b813129640beb650c33268a000611e872200cbd9985e4e8160ead069e57c01e209b2574e8ceef825949013a1a60736eae7abe2abee35761b16d99241916c87ccda173736b92e31ec03cbd952b643dfd5f0b2038c0b66d1de58aa63cfb7ea3fe4'


  it @ 'two from_random', @::>
    const okey_a = await opaque_session.from_random()
    const okey_b = await opaque_session.from_random()

    expect @ okey_a.ec
    .to.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref


  it @ 'two from_content', @::>
    const okey_a = await opaque_session.from_content @ u8_test_content
    const okey_b = await opaque_session.from_content @ u8_test_content

    expect @ okey_a.ec
    .to.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.deep.equal @ okey_b.k1ref

    expect @ okey_a.k2loc
    .to.deep.equal @ okey_b.k2loc


    // ecdsa algorithm uses an ephemeral nonce
    const a_rec = await okey_a.encipher(u8_test_content)
    const a2_rec = await okey_a.encipher(u8_test_content)
    expect(a_rec).to.not.deep.equal(a2_rec)

    const b_rec = await okey_b.encipher(u8_test_content)
    expect(b_rec).to.not.deep.equal(a_rec)


  it @ 'from_random', @::>
    const okey = await opaque_session.from_random()
    const p_rec = okey.encipher(u8_test_content)
    expect(p_rec).to.be.a('promise')

    const rec = await p_rec
    expect(rec).to.be.an.instanceof(Uint8Array)

    const p_check = okey.validate(rec)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(rec)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content


  it @ 'from_k1ref', @::>
    const okey = await opaque_session.from_k1ref(kv_test.k1ref)

    const p_check = okey.validate(kv_test.value)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(kv_test.value)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content

  it @ 'from_k2ref', @::>
    const okey = await opaque_session.from_k2loc(kv_test.k2loc)

    const p_check = okey.validate(kv_test.value)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(kv_test.value)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans
    expect(ans).to.be.undefined


  it @ 'from_k1ref invalid', @::>
    const okey = await opaque_session.from_k1ref(kv_test.k1ref)

    expect @ await okey.decipher(kv_test.value)
    .to.be.deep.equal @ u8_test_content

    for const slice_args of [ [15,-15], [0,-15], [15], ] ::
      const part = kv_test.value.slice @ ...slice_args
      expect @ await okey.decipher(part)
      .to.be.undefined


  it @ 'from_k2ref invalid', @::>
    const okey = await opaque_session.from_k2loc(kv_test.k2loc)

    expect @ await okey.validate(kv_test.value)
    .to.be.true

    for const slice_args of [ [15,-15], [0,-15], [15], ] ::
      const part = kv_test.value.slice @ ...slice_args
      expect @ await okey.validate(part)
      .to.be.false

