import @{}
  opaque_core_api, opaque_basic,
  opaque_tahoe,
  tahoe_hmac,
  tahoe_ecdhe, tahoe_ecdhe_mirror, 
  opaque_ecdsa, 

#IF PLAT_WEB
  from '@phorbas/opaque/esm/web/index.mjs'
#ELIF PLAT_NODEJS
  from '@phorbas/opaque/esm/node/index.mjs'

import @{}
  cbor_encode, cbor_decode,
  utf8_to_u8, u8_to_hex, hex_to_u8,
from 'cbor-codec'

const { assert, expect } = require('chai')



describe @ 'opaque core & basics', @::
  opaque_tahoe.init_shared_codec @:
    encode: cbor_encode
    decode: cbor_decode

  it @ 'shape of opaque_core_api', @::>
    _expect_core_api @ opaque_core_api

  it @ 'shape of opaque_basic', @::>
    _expect_full_api @ opaque_basic

  it @ 'shape of opaque_tahoe', @::>
    _expect_full_api @ opaque_tahoe

  it @ 'shape of opaque_basic.as_core()', @::>
    _expect_core_api @ opaque_basic.as_core()

  it @ 'shape of opaque_tahoe.as_core()', @::>
    _expect_core_api @ opaque_tahoe.as_core()

  it @ 'shape of tahoe_hmac', @::>
    _expect_full_api @ tahoe_hmac @
      new Uint8Array @# 10,12,14,16

  it @ 'shape of tahoe_ecdhe', @::>
    const op_alice_key = tahoe_ecdhe()
    const op_bob_p = tahoe_ecdhe_mirror(op_alice_key.ecdh)

    expect(op_bob_p).to.be.a('promise')
    const op_bob = await op_bob_p
    _expect_full_api @ op_bob

    const op_alice_p = op_alice_key.with_ecdh(op_bob.ecdh)
    expect(op_alice_p).to.be.a('promise')
    const op_alice = await op_alice_p
    _expect_full_api @ op_alice


  it @ 'shape of tahoe_ecdhe.as_core()', @::>
    const op_alice_key = tahoe_ecdhe()
    const op_bob_p = tahoe_ecdhe_mirror(op_alice_key.ecdh)

    expect(op_bob_p).to.be.a('promise')
    const op_bob = await op_bob_p
    _expect_core_api @ op_bob.as_core()

    const op_alice_p = op_alice_key.with_ecdh(op_bob.ecdh)
    expect(op_alice_p).to.be.a('promise')
    const op_alice = await op_alice_p
    _expect_core_api @ op_alice.as_core()


  it @ 'shape of opaque_ecdsa', @::>
    _expect_full_api @ opaque_ecdsa

  it @ 'shape of opaque_ecdsa.as_core()', @::>
    _expect_core_api @ opaque_ecdsa.as_core()


  it @ 'opaque_basic.from_u8', @::>
    const p_okey = opaque_basic.from_u8 @
      new Uint8Array @# 10,12,14,16
    expect(p_okey).to.be.a('promise')

    const okey = await p_okey
    _expect_okey(okey)

    expect(okey.k1ref)
    .to.deep.equal @ hex_to_u8 @ "0e3f601857911eccb26954151fdd238614138e25de92531f834e1dd68ab5e89b"

    expect(okey.k2loc)
    .to.deep.equal @ hex_to_u8 @ "127755b4d6d7d7a3508203ea1d6d55da047747bdba69b4dd89535ab2656763cd"


  it @ 'opaque_basic.from_content', @::>
    const p_okey = opaque_basic.from_content @
      utf8_to_u8 @ 'some example content'
    expect(p_okey).to.be.a('promise')

    const okey = await p_okey
    _expect_okey(okey)

    expect(okey.k1ref)
    .to.deep.equal @ hex_to_u8 @ "9b05a4d2f05971731b4739415262dcb7b1ac05c9ec3c135280e1212fac555f23"

    expect(okey.k2loc)
    .to.deep.equal @ hex_to_u8 @ "cb27470ffe7164a6b29613baf7193deca8db4ef9c880ea0345a4549f4ad63ecd"


  it @ 'opaque_basic.from_random', @::>
    const p_okey = opaque_basic.from_random()
    expect(p_okey).to.be.a('promise')

    const okey = await p_okey
    _expect_okey(okey)


  it @ 'opaque_tahoe.from_content', @::>
    const u8_test_content = utf8_to_u8 @ 'some sample unit test content'

    const kv_test = @{}
      k1ref: hex_to_u8 @ 'd421f311dff096fcae9f934b7ca417297bb2bc9e550709fb416a5e45bc5d19ea'
      value: hex_to_u8 @ 'a36163582d67f3efd56df4ba45ee6e23fed12d38c5cbf33494f1b35ece8feeecf15eadeb187e4fda00199b9da2b4af56bbc261765086b528ce6f3fea6a64fcd8824ae0232b616c582013fa1fd5c392b22ba346390074b82c41fc4c48999f4dc2feae4f349c1bfb29ea'

    ::
      const p_okey = opaque_tahoe.from_content(u8_test_content)
      expect(p_okey).to.be.a('promise')

      const okey = await p_okey
      _expect_okey(okey)

      expect(okey.k1ref).to.be.deep.equal @ kv_test.k1ref

      expect(okey.encipher).to.be.a('function')
      expect(okey.decipher).to.be.a('function')

      const p_u8_enc = okey.encipher(u8_test_content)
      expect(p_u8_enc).to.be.a('promise')

      const u8_enc = await p_u8_enc
      expect(u8_enc).to.be.an.instanceof(Uint8Array)


    ::
      const p_okey = opaque_tahoe.from_k1ref(kv_test.k1ref)
      expect(p_okey).to.be.a('promise')

      const okey = await p_okey
      _expect_okey(okey)

      expect(okey.k1ref).to.be.deep.equal @ kv_test.k1ref

      const p_u8_dec = okey.decipher(kv_test.value)
      expect(p_u8_dec).to.be.a('promise')

      const u8_dec = await p_u8_dec
      expect(u8_dec).to.be.an.instanceof(Uint8Array)
      expect(u8_dec).to.be.deep.equal @ u8_test_content


  it @ 'tahoe_hmac.from_u8', @::>
    const hk = utf8_to_u8 @ 'some hmac key'
    
    const okey = await tahoe_hmac(hk).from_u8 @
      new Uint8Array @# 10,12,14,16

    _expect_okey(okey)

    expect(okey.k1ref)
    .to.deep.equal @ hex_to_u8 @ "2bfc553c3ac54f041e02ffc99714981f3084a382748bd9b594317d2f4ec9e2fc"

    expect(okey.k2loc)
    .to.deep.equal @ hex_to_u8 @ "7334974a0cba50f7a836731efb1e3dcfe0c739c393cc5ac8e1fb8f3991341fcc"





function _expect_core_api(opaque, only_core) ::
  expect(opaque_core_api).to.be.an('object')
  expect(opaque.from_k1ref).to.be.a('function')
  expect(opaque.from_k2loc).to.be.a('function')
  expect(opaque.from_random).to.be.a('function')
  expect(opaque.from_content).to.be.a('function')
  expect(opaque.from_u8).to.be.a('function')
  expect(opaque.as_core).to.be.a('function')

  if ! only_core :: 
    expect(opaque._kdf0_hash).to.be.undefined
    expect(opaque._kdf0_random).to.be.undefined
    expect(opaque._kdf1_ref).to.be.undefined
    expect(opaque._kdf2_loc).to.be.undefined


function _expect_full_api(opaque) ::
  _expect_core_api @ opaque, true

  expect(opaque._kdf0_hash).to.be.a('function')
  expect(opaque._kdf0_random).to.be.a('function')
  expect(opaque._kdf1_ref).to.be.a('function')
  expect(opaque._kdf2_loc).to.be.a('function')


function _expect_okey(okey) ::
  expect(okey.k1ref)
  .to.have.length(32)
  .to.be.an.instanceof(Uint8Array)

  expect(okey.k2loc)
  .to.have.length(32)
  .to.be.an.instanceof(Uint8Array)

  expect(okey.k21pair)
  .to.be.a('function')

  expect(okey.k21pair())
  .to.be.an('array')
  .to.have.length(2)
  .to.deep.equal @# okey.k2loc, okey.k1ref

