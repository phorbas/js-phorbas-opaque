import @{}
  opaque_core_api, opaque_basic,
  opaque_basic_hmac,
  opaque_tahoe,
  tahoe_hmac,
  tahoe_ecdhe, tahoe_ecdhe_mirror, 
  opaque_ecdsa_basic, 
  opaque_ecdsa_tahoe, 

#IF PLAT_WEB
  from '@phorbas/opaque/esm/web-codec/index.mjs'
#ELIF PLAT_NODEJS
  from '@phorbas/opaque/esm/node-codec/index.mjs'

import @{}
  cbor_encode, cbor_decode,
from './_utils.jsy'

import @{}
  _expect_core_api,
  _expect_full_api,
from './_opaque_test_utils.jsy'

const { assert, expect } = require('chai')



describe @ 'opaque core shape', @::
  opaque_tahoe.init_shared_codec @:
    encode: cbor_encode
    decode: cbor_decode

  it @ 'shape of opaque_core_api', @::>
    await _expect_core_api @ opaque_core_api, {skip_okey: true}

  it @ 'shape of opaque_basic', @::>
    await _expect_full_api @ opaque_basic

  it @ 'shape of opaque_basic_hmac', @::>
    await _expect_full_api @ opaque_basic_hmac

  it @ 'shape of opaque_tahoe', @::>
    await _expect_full_api @ opaque_tahoe

  it @ 'shape of opaque_basic.as_core()', @::>
    await _expect_core_api @ opaque_basic.as_core()

  it @ 'shape of opaque_tahoe.as_core()', @::>
    await _expect_core_api @ opaque_tahoe.as_core()

  it @ 'shape of tahoe_hmac', @::>
    await _expect_full_api @ tahoe_hmac @
      new Uint8Array @# 10,12,14,16

  it @ 'shape of tahoe_ecdhe', @::>
    const op_alice_key = tahoe_ecdhe()
    const op_bob_p = tahoe_ecdhe_mirror(op_alice_key.ecdh)

    expect(op_bob_p).to.be.a('promise')
    const op_bob = await op_bob_p
    await _expect_full_api @ op_bob

    const op_alice_p = op_alice_key.with_ecdh(op_bob.ecdh)
    expect(op_alice_p).to.be.a('promise')
    const op_alice = await op_alice_p
    await _expect_full_api @ op_alice


  it @ 'shape of tahoe_ecdhe.as_core()', @::>
    const op_alice_key = tahoe_ecdhe()
    const op_bob_p = tahoe_ecdhe_mirror(op_alice_key.ecdh)

    expect(op_bob_p).to.be.a('promise')
    const op_bob = await op_bob_p
    await _expect_core_api @ op_bob.as_core()

    const op_alice_p = op_alice_key.with_ecdh(op_bob.ecdh)
    expect(op_alice_p).to.be.a('promise')
    const op_alice = await op_alice_p
    await _expect_core_api @ op_alice.as_core()


  it @ 'shape of opaque_ecdsa_basic', @::>
    await _expect_full_api @ opaque_ecdsa_basic

  it @ 'shape of opaque_ecdsa_basic.as_core()', @::>
    await _expect_core_api @ opaque_ecdsa_basic.as_core()


  it @ 'shape of opaque_ecdsa_tahoe', @::>
    await _expect_full_api @ opaque_ecdsa_tahoe

  it @ 'shape of opaque_ecdsa_tahoe.as_core()', @::>
    await _expect_core_api @ opaque_ecdsa_tahoe.as_core()

