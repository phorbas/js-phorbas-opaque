import @{} opaque_ecdsa
#IF PLAT_WEB
  from '@phorbas/opaque/esm/web/index.mjs'
#ELIF PLAT_NODEJS
  from '@phorbas/opaque/esm/node/index.mjs'

import @{}
  cbor_encode, cbor_decode,
  utf8_to_u8, u8_to_hex, hex_to_u8,
from 'cbor-codec'

const { assert, expect } = require('chai')

describe @ 'opaque ecdsa', @::
  opaque_ecdsa.init_shared_codec @:
    encode: cbor_encode
    decode: cbor_decode


  const u8_test_content = utf8_to_u8 @ 'some sample unit test content'
  const kv_test = @{}
    k1ref: hex_to_u8 @ '1bcc1892df1e4f45d84f84842ee54b8a347aa11f228b99ca770ac2beb6bcfc6f'
    k2loc: hex_to_u8 @ '21d70227b4e9b728738583acebdd0ef4396ffc4a7bf7b93f961a4866557b65fc'
    value: hex_to_u8 @ 'a2617a588400dbc302afa5be4555ccb164840a1332397d97d5ab4f0b30ba24827d7ddfda0d69ab03bd6f7441545e9e1654295f12f1faa7443a941d972a8ff7d14166becd25c55b00382a1739f4a823e8dd6c281954e1232a76a1b0a01012a784110343d027e10572b4f07f9d03e09b9f51681356e6df77ca36e39a7184968b8bcc45f59d59de375062616259010ba46163582da0c3d8d807ac4efe728ee7d0ec05732c623873c71e41797072664bfc40923610ca5f65cd0788cd5e6a9d91387d6176507bd9e153ba53814aa7c5239a02b6ab96616c582021d70227b4e9b728738583acebdd0ef4396ffc4a7bf7b93f961a4866557b65fc6165589e30819b301006072a8648ce3d020106052b81040023038186000400c8fae0e4cd2bbf153d63489074e3e2388bb8decd0da6447737d2d484c0e8a0a66f5e06dfb637e527d8fb44a84dae072b90b9cd00442aacdf3d382286ab45dee2ae01dbe875bcbbea14b6d90261e1c52028e0e43ee4e15005ae68e3bf653292ae3f22783e7c679e91115f4fffb536e2674420d7989db78879b368afb93d8745a76310b4'


  it @ 'two from_random', @::>
    const okey_a = await opaque_ecdsa.from_random()
    const okey_b = await opaque_ecdsa.from_random()

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref


  it @ 'two from_content', @::>
    const okey_a = await opaque_ecdsa.from_content @ u8_test_content
    const okey_b = await opaque_ecdsa.from_content @ u8_test_content

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref

    expect @ okey_a.k2loc
    .to.not.deep.equal @ okey_b.k2loc


  it @ 'from_random', @::>
    const okey = await opaque_ecdsa.from_random()
    const p_rec = okey.encipher(u8_test_content)
    expect(p_rec).to.be.a('promise')

    const rec = await p_rec
    expect(rec).to.be.an.instanceof(Uint8Array)

    const p_check = okey.validate(rec)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(rec)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content

    if 0 ::
      console.log @ `
        const kv_test = @{}
          k1ref: hex_to_u8 @ '${u8_to_hex @ okey.k1ref}'
          k2loc: hex_to_u8 @ '${u8_to_hex @ okey.k2loc}'
          value: hex_to_u8 @ '${u8_to_hex @ rec}'
        `

  it @ 'from_k1ref', @::>
    const okey = await opaque_ecdsa.from_k1ref(kv_test.k1ref)

    const p_check = okey.validate(kv_test.value)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(kv_test.value)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content


  it @ 'from_k2ref', @::>
    const okey = await opaque_ecdsa.from_k2loc(kv_test.k2loc)

    const p_check = okey.validate(kv_test.value)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(kv_test.value)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans
    expect(ans).to.be.undefined


  it @ 'from_k1ref invalid', @::>
    const okey = await opaque_ecdsa.from_k1ref(kv_test.k1ref)

    expect @ await okey.decipher(kv_test.value)
    .to.be.deep.equal @ u8_test_content

    for const slice_args of [ [15,-15], [0,-15], [15], ] ::
      const part = kv_test.value.slice @ ...slice_args
      expect @ await okey.decipher(part)
      .to.be.undefined


  it @ 'from_k2ref invalid', @::>
    const okey = await opaque_ecdsa.from_k2loc(kv_test.k2loc)

    expect @ await okey.validate(kv_test.value)
    .to.be.true

    for const slice_args of [ [15,-15], [0,-15], [15], ] ::
      const part = kv_test.value.slice @ ...slice_args
      expect @ await okey.validate(part)
      .to.be.false

