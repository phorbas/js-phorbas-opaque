import @{} opaque_ecdsa
#IF PLAT_WEB
  from '@phorbas/opaque/esm/web/index.mjs'
#ELIF PLAT_NODEJS
  from '@phorbas/opaque/esm/node/index.mjs'

import @{}
  cbor_encode, cbor_decode,
  utf8_to_u8, u8_to_hex, hex_to_u8,
from 'cbor-codec'

const { assert, expect } = require('chai')

describe @ 'opaque ecdsa', @::
  opaque_ecdsa.init_shared_codec @:
    encode: cbor_encode
    decode: cbor_decode


  const u8_test_content = utf8_to_u8 @ 'some sample unit test content'
  const kv_test = @{}
    k1ref: hex_to_u8 @ 'c80eadbe53f0cfc0b840b8fb8eeaf9728de4d9b121830959bdfdd9776754cf25'
    k2loc: hex_to_u8 @ 'e0a61df1c5653aed61cbec88301e555175ab5ed071557eada88ed9776754cf25'
    value: hex_to_u8 @ 'a2617a5884000e0ddcce8b15b59a8dc7ce64a26a32fd1b3023b1186da6c112224c90fba0b8646d409afd727aa672434207dee9a42919366c89609229ea45be0c700db5db3033b3003dbc57ad658fc4cd7b4c30dfcc81826f350a0c2229799b04395d10c47074f37f280d5ce641e77c7d71b27be9a7323aec34788d38551501f2aff92f1b9d071f9a19616259010ba46163582d47c24f1ccc6e3a1c7cdd0e875349bb0e674fb44b7ea3b58e01f1fad814bfb948fe5d0d1db4209514f94c95ec1d6176508f562e81ed6fe7fb7727f25a93c08eaa616c5820e0a61df1c5653aed61cbec88301e555175ab5ed071557eada88ed9776754cf256165589e30819b301006072a8648ce3d020106052b81040023038186000400d1397c4618a583d18fcd6607002e0d5539b5a93cdede43cc14fe0778e6a45f8662556b9d9878a9b80ababaed05ae6af2cb16862cda24947869d878e55c08b3c9de000a2766ce65ecfe5fbf5429de1647159b7fc25fe994d6bd05f38de6f06facbd9ce8f86210df7ea2a69be0589b53b3ce22c890f562a7991305f1405525f7933789c5'

  if 0 ::
    return it.only @ 'REGEN kv_test data', @::>
      const okey = await opaque_ecdsa.from_random()
      const rec = await okey.encipher(u8_test_content)

      console.log @ `
        const kv_test = @{}
          k1ref: hex_to_u8 @ '${u8_to_hex @ okey.k1ref}'
          k2loc: hex_to_u8 @ '${u8_to_hex @ okey.k2loc}'
          value: hex_to_u8 @ '${u8_to_hex @ rec}'
        `


  it @ 'two from_random', @::>
    const okey_a = await opaque_ecdsa.from_random()
    const okey_b = await opaque_ecdsa.from_random()

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref


  it @ 'two from_content', @::>
    const okey_a = await opaque_ecdsa.from_content @ u8_test_content
    const okey_b = await opaque_ecdsa.from_content @ u8_test_content

    expect @ okey_a.ec
    .to.not.deep.equal @ okey_b.ec

    expect @ okey_a.k1ref
    .to.not.deep.equal @ okey_b.k1ref

    expect @ okey_a.k2loc
    .to.not.deep.equal @ okey_b.k2loc


  it @ 'from_random', @::>
    const okey = await opaque_ecdsa.from_random()
    const p_rec = okey.encipher(u8_test_content)
    expect(p_rec).to.be.a('promise')

    const rec = await p_rec
    expect(rec).to.be.an.instanceof(Uint8Array)

    const p_check = okey.validate(rec)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(rec)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content

  it @ 'from_k1ref', @::>
    const okey = await opaque_ecdsa.from_k1ref(kv_test.k1ref)

    const p_check = okey.validate(kv_test.value)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(kv_test.value)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans

    expect(ans).to.be.an.instanceof(Uint8Array)
    expect(ans).to.be.deep.equal @ u8_test_content


  it @ 'from_k2ref', @::>
    const okey = await opaque_ecdsa.from_k2loc(kv_test.k2loc)

    const p_check = okey.validate(kv_test.value)
    expect(p_check).to.be.a('promise')
    const check = await p_check
    expect(check).to.be.true

    const p_ans = okey.decipher(kv_test.value)
    expect(p_ans).to.be.a('promise')
    const ans = await p_ans
    expect(ans).to.be.undefined


  it @ 'from_k1ref invalid', @::>
    const okey = await opaque_ecdsa.from_k1ref(kv_test.k1ref)

    expect @ await okey.decipher(kv_test.value)
    .to.be.deep.equal @ u8_test_content

    for const slice_args of [ [15,-15], [0,-15], [15], ] ::
      const part = kv_test.value.slice @ ...slice_args
      expect @ await okey.decipher(part)
      .to.be.undefined


  it @ 'from_k2ref invalid', @::>
    const okey = await opaque_ecdsa.from_k2loc(kv_test.k2loc)

    expect @ await okey.validate(kv_test.value)
    .to.be.true

    for const slice_args of [ [15,-15], [0,-15], [15], ] ::
      const part = kv_test.value.slice @ ...slice_args
      expect @ await okey.validate(part)
      .to.be.false

