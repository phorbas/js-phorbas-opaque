import {describe, it} from 'node:test'
import {assert, expect} from 'chai'

import { tahoe_ecdhe, tahoe_ecdhe_mirror } from '@phorbas/opaque/esm/index.js'

import @{}
  _expect_full_api,
  _expect_core_api,
from '../_opaque_test_utils.jsy'


describe @ 'opaque ecdhe tahoe', @::
  describe @ 'shape', @::
    it @ 'shape of tahoe_ecdhe', @::>
      const op_ecdhe = tahoe_ecdhe()

      expect(op_ecdhe).to.be.a('function')
      expect(op_ecdhe.ecdh).to.be.a('promise')
      expect(await op_ecdhe.ecdh).to.be.instanceof(ArrayBuffer)


    it @ 'shape of tahoe_ecdhe_mirror', @::>
      const op_alice_key = tahoe_ecdhe()
      const op_bob_p = tahoe_ecdhe_mirror(op_alice_key.ecdh)

      expect(op_bob_p).to.be.a('promise')
      const op_bob = await op_bob_p

      const op_alice_p = op_alice_key.with_ecdh(op_bob.ecdh)
      expect(op_alice_p).to.be.a('promise')
      const op_alice = await op_alice_p

      await _expect_full_api @ op_bob


    it @ 'shape of tahoe_ecdhe.as_core()', @::>
      const op_alice_key = tahoe_ecdhe()
      const op_bob_p = tahoe_ecdhe_mirror(op_alice_key.ecdh)

      expect(op_bob_p).to.be.a('promise')
      const op_bob = await op_bob_p
      await _expect_core_api @ op_bob.as_core()

      const op_alice_p = op_alice_key.with_ecdh(op_bob.ecdh)
      expect(op_alice_p).to.be.a('promise')
      const op_alice = await op_alice_p
      await _expect_core_api @ op_alice.as_core()


    it @ 'shape second', @::>
      const op_alice = tahoe_ecdhe()
      expect(op_alice.with_ecdh).to.be.a('function')
      expect(op_alice.ecdh).to.be.a('promise')
      expect(await op_alice.ecdh).to.be.instanceof(ArrayBuffer)

      const op_bob_p = tahoe_ecdhe_mirror(op_alice.ecdh)

      expect(op_bob_p).to.be.a('promise')
      const op_bob = await op_bob_p
      expect(op_bob.with_ecdh).to.be.a('function')
      expect(op_bob.ecdh).to.be.a('promise')
      expect(await op_bob.ecdh).to.be.instanceof(ArrayBuffer)

  it @ 'three', @::>
    const op_ecdhe = @{}
      a: tahoe_ecdhe()
      b: tahoe_ecdhe()
      c: tahoe_ecdhe()
    

    const op_paired = @{}
    for const i of 'abc' ::
      for const j of 'abc' ::
        if i !== j ::
          op_paired[i+j] = await op_ecdhe[i] @
            op_ecdhe[j].ecdh


    const test_content = 'some ecdhe test content'
    const hk1ref_map = {}, hk2loc_map = {}
    for const [name, op] of Object.entries(op_paired) ::
      const okey = await op.from_content(test_content)
      hk1ref_map[name] = okey.hk1ref
      hk2loc_map[name] = okey.hk2loc

    for const i of 'abc' ::
      for const j of 'abc' ::
        if i !== j ::
          assert.equal @ hk1ref_map[i+j], hk1ref_map[j+i], `k1ref i:${i} j:${j}` 
          assert.equal @ hk2loc_map[i+j], hk2loc_map[j+i], `k2loc i:${i} j:${j}` 


